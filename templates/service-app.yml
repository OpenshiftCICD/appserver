kind: "Template"
apiVersion: "v1"
metadata:
  name: "app"
  annotations:
    openshift.io/display-name: "Microservice App"
    description: "The hexample microservice App"
    iconClass: "icon-app"
    tags: "instant-app"

parameters:
  - name: "NAME"
    displayName: "The service name"
    required: true

  - name: "MAVEN_REPOSITORY_URL"
    displayName: "The url of the maven repository to download binary from"
    required: true

  - name: "VERSION"
    displayName: "The version of the app to download"
    required: true

  - name: "GIT_REPO_URL"
    displayName: "The repository url"
    required: true

  - name: "GIT_REPO_REF"
    displayName: "The repository ref"
    required: true

  - name: "SECRET_GITHUB_SSH"
    displayName: "The git secret to use"
    required: true

  - name: "SECRET_GITHUB_HOOK"
    displayName: "The git hook secret to use"
    required: true

  - name: "SECRET_NEXUS_SERVICE"
    displayName: "The secret for downloading from nexus"
    required: true

  - name: "MIN_CPU"
    displayName: "Min CPU"
    description: "Min cpu allocated to the pod"
    required: true
    value: "1000m"

  - name: "MIN_MEMORY"
    displayName: "Min Memory"
    description: "Min memory in Gigabyte allocated to the pod"
    required: true
    value: "1"

  - name: "MAX_CPU"
    displayName: "Max CPU"
    description: "Max cpu allocated to the pod"
    required: true
    value: 1000m

  - name: "MAX_MEMORY"
    displayName: "Max Memory"
    description: "Max memory in Gigabyte allocated to the pod"
    required: true
    value: "1"

objects:
  - kind: "ImageStream"
    apiVersion: "v1"
    metadata:
      name: "${NAME}"
      labels:
        app: "${NAME}"
      annotations:
        openshift.io/display-name: "Microservice ${NAME}"

  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "${NAME}"
      labels:
        name: "${NAME}"
        app: "${NAME}"
    spec:
      source:
        type: "Git"
        contextDir: "/docker"
        git:
          uri: "${GIT_REPO_URL}"
          ref: "${GIT_REPO_REF}"
        sourceSecret:
          name: "${SECRET_GITHUB_SSH}"
        secrets:
          - secret:
              name: "${SECRET_NEXUS_SERVICE}"
      strategy:
        type: "Docker"
        dockerStrategy:
          env:
            - name: "BUILD_LOGLEVEL"
              value: "5"
            - name: "MAVEN_REPOSITORY_URL"
              value: "${MAVEN_REPOSITORY_URL}"
            - name: "VERSION"
              value: "${VERSION}"
      output:
        to:
          kind: "ImageStreamTag"
          name: "${NAME}:latest"
          labels:
            app: "${NAME}"
      triggers:
        - type: "ConfigChange"
        - type: "ImageChange"
          automatic: true
          containerNames:
            - "${NAME}"
          from:
            kind: "ImageStreamTag"
            name: "openjdk8:latest"

  - kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      name: "${NAME}"
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: "${NAME}"
    spec:
      strategy:
        type: "Recreate"
      replicas: "1"
      selector:
        name: "${NAME}"
      triggers:
        - type: "ConfigChange"
        - type: "ImageChange"
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}"
            from:
              kind: "ImageStreamTag"
              name: "${NAME}:latest"
      template:
        metadata:
          labels:
            name: "${NAME}"
        spec:
          containers:
            - name: "${NAME}"
              image: " "
              imagePullPolicy: IfNotPresent
              readinessProbe:
                successThreshold: 1
                failureThreshold: 10
                timeoutSeconds: 5
                initialDelaySeconds: 5
                periodSeconds: 5
                httpGet:
                  path: "/"
                  port: 8080
              livenessProbe:
                successThreshold: 1
                failureThreshold: 10
                timeoutSeconds: 5
                initialDelaySeconds: 15
                periodSeconds: 5
                httpGet:
                  path: "/"
                  port: 8080
              resources:
                requests:
                  memory: "${MIN_MEMORY}Gi"
                  cpu: "${MIN_CPU}"
                limits:
                  memory: "${MAX_MEMORY}Gi"
                  cpu: "${MAX_CPU}"
              terminationMessagePath: "/dev/termination.log"
              imagePullPolicy: "IfNotPresent"
              capabilities:
                securityContext:
                  capabilities:
                    privileged: false
  - kind: "Route"
    apiVersion: "v1"
    metadata:
      name: "${NAME}"
      annotations:
        template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
      labels:
        app: "${NAME}"
    spec:
      to:
        kind: "Service"
        name: "${NAME}"
      tls:
        termination: "edge"
        insecureEdgeTerminationPolicy: "Redirect"

  - kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "${NAME}"
      annotations:
        service.openshift.io/infrastructure: "true"
      labels:
        app: "${NAME}"
    spec:
      ports:
        - name: "web"
          protocol: "TCP"
          port: 80
          targetPort: 8080
          nodePort: 0
      selector:
        name:  "${NAME}"
      type: "ClusterIP"
      sessionAffinity: "None"
